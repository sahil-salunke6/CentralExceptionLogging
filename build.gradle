plugins {
    id 'java'
    id 'jacoco'
}

group = 'org.practice'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // Spring boot web application
    implementation 'org.springframework.boot:spring-boot-starter-web:3.5.3'
    // Spring boot data jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.5.3'
    // H2 database
    runtimeOnly 'com.h2database:h2:2.3.232'
    // For Validation annotations
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.5.3'
    // For Logging using slf4j-api
    implementation 'org.slf4j:slf4j-api:2.0.17'
    // For Logging using logback
    implementation 'ch.qos.logback:logback-classic:1.5.18'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    // lombok
    implementation 'org.projectlombok:lombok:1.18.28'
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    testCompileOnly 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'

    // OpenTelemetry
    implementation platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:2.18.1")
    implementation "io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter"
    implementation 'io.opentelemetry:opentelemetry-api:1.39.0'
    implementation 'io.opentelemetry:opentelemetry-sdk:1.39.0'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.39.0'

}

// === TEST CONFIG ===
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// === JACOCO CONFIG ===
jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80 // Require at least 80% coverage
            }
        }
    }
}

// Ensure coverage verification runs with `gradle check`
check.dependsOn jacocoTestCoverageVerification